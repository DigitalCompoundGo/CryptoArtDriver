{
  "address": "0xe25DD78d4bEdEe32c4667B32Fe018Fb12706798d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_baseURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_thesaurus",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_orangeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_blueAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_greyAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_mintStartTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "word",
          "type": "string"
        }
      ],
      "name": "AddWord",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimMintAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Locked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "verb",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "adj",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "noun",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "types",
          "type": "uint8"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_old",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_new",
          "type": "uint256"
        }
      ],
      "name": "NewDefAllowedMintAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_old",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_new",
          "type": "uint256"
        }
      ],
      "name": "NewPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "verb",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "adj",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "noun",
          "type": "string"
        }
      ],
      "name": "RefreshWords",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "TransferEth",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_word",
          "type": "string"
        }
      ],
      "name": "addWord",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "added",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "adj",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedMintAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "claimMintAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        }
      ],
      "name": "freeMintAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_baseURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_thesaurus",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_orangeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_blueAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_greyAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_mintStartTime",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "locked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "noun",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "refreshWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "thesaurus",
      "outputs": [
        {
          "internalType": "contract IThesaurus",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferEth",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "typeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "types",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "verb",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xedb446f757fb253364513478a6ec5278cc30c2a8f73c6b2753130b9da7dee4a3",
  "receipt": {
    "to": null,
    "from": "0xFb9C88214bC0AB089fdC387342eFf3ebE61FC23d",
    "contractAddress": "0xe25DD78d4bEdEe32c4667B32Fe018Fb12706798d",
    "transactionIndex": 99,
    "gasUsed": "3582826",
    "logsBloom": "0x
    "blockHash": "0xbd115a8287e69d9729cdf492e4eaebd0fd15c2bb420b337fb4a758d9bdd08198",
    "transactionHash": "0xedb446f757fb253364513478a6ec5278cc30c2a8f73c6b2753130b9da7dee4a3",
    "logs": [
      {
        "transactionIndex": 99,
        "blockNumber": 15894730,
        "transactionHash": "0xedb446f757fb253364513478a6ec5278cc30c2a8f73c6b2753130b9da7dee4a3",
        "address": "0xe25DD78d4bEdEe32c4667B32Fe018Fb12706798d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fb9c88214bc0ab089fdc387342eff3ebe61fc23d"
        ],
        "data": "0x",
        "logIndex": 193,
        "blockHash": "0xbd115a8287e69d9729cdf492e4eaebd0fd15c2bb420b337fb4a758d9bdd08198"
      },
      {
        "transactionIndex": 99,
        "blockNumber": 15894730,
        "transactionHash": "0xedb446f757fb253364513478a6ec5278cc30c2a8f73c6b2753130b9da7dee4a3",
        "address": "0xe25DD78d4bEdEe32c4667B32Fe018Fb12706798d",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 194,
        "blockHash": "0xbd115a8287e69d9729cdf492e4eaebd0fd15c2bb420b337fb4a758d9bdd08198"
      }
    ],
    "blockNumber": 15894730,
    "cumulativeGasUsed": "13154402",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Crypto Art Driver",
    "CAD",
    "https://cad-renderer.digitalcompound.org/metadata",
    "0x96DF4508d5Fb5f57363b28A0Fd56233dc6F2a5cD",
    "100000000000000000",
    30,
    270,
    2700,
    "0xf53ec53832bb9f9bc7117bda2f65068c7e5aef87d958c753610fb3470bd3cd03",
    "1667700000"
  ],
  "numDeployments": 1,
  "solcInputHash": "6d3599e8881947dd14f1b856467c7aca",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_thesaurus\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orangeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blueAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_greyAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_mintStartTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"word\",\"type\":\"string\"}],\"name\":\"AddWord\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimMintAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"verb\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"adj\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"noun\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"types\",\"type\":\"uint8\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"NewDefAllowedMintAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"NewPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"verb\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"adj\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"noun\",\"type\":\"string\"}],\"name\":\"RefreshWords\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferEth\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_word\",\"type\":\"string\"}],\"name\":\"addWord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"added\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adj\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimMintAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"freeMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_thesaurus\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orangeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blueAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_greyAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_mintStartTime\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"noun\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"refreshWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thesaurus\",\"outputs\":[{\"internalType\":\"contract IThesaurus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"typeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"types\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"verb\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ArtDriver.sol\":\"ArtDriver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x5331c8909221d9f9f3851cfadd5959d0873413a2c27e30e0f2fa234158c1c6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x56035505d62f05f5e5040532b749ab25237f6dd87c7a514614acda96af996751\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf1870306db8391db9cf14b41be0da76857a88df0e5c623d2b2338fb30a3bd5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProofUpgradeable {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4c91e851f295b7f07a789d92ccb0ced46dce55fef30a5a076889721a9f6eed21\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcaa8b7861115ea691c77ddbeac140a444e0edcd1d9812a43942c0f6b42b36a49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"contracts/ArtDriver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\n\\nimport \\\"./utils/Array.sol\\\";\\nimport \\\"./utils/Random.sol\\\";\\nimport \\\"./lib/ArtDriverEvent.sol\\\";\\nimport \\\"./interface/IThesaurus.sol\\\";\\n\\ncontract ArtDriver is ArtDriverEvent, OwnableUpgradeable, ERC721EnumerableUpgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n    using SafeMathUpgradeable for uint256;\\n\\n    CountersUpgradeable.Counter private _tokenIds;\\n\\n    uint8 private constant GREY_TYPE = 1;\\n    uint8 private constant BLUE_TYPE = 2;\\n    uint8 private constant ORANGE_TYPE = 3;\\n\\n    IThesaurus public thesaurus;\\n    string public baseURI;\\n    uint256 public price;\\n    bytes32 public merkleRoot;\\n    uint256 public mintStartTime;\\n\\n    //type => remaining amount\\n    mapping(uint8 => uint256) public typeAmount;\\n\\n    //tokenId => verb content\\n    mapping(uint256 => string) public verb;\\n\\n    //tokenId => adj content\\n    mapping(uint256 => string) public adj;\\n\\n    //tokenId => noun content\\n    mapping(uint256 => string) public noun;\\n\\n    //tokenId => whether to add words\\n    mapping(uint256 => string) public added;\\n\\n    //tokenId => Is it locked\\n    mapping(uint256 => bool) public locked;\\n\\n    //tokenId => driver type\\n    mapping(uint256 => uint8) public types;\\n\\n    mapping(address => bool) public claimed;\\n    //address => Number of additional mint allowed\\n    mapping(address => uint256) public allowedMintAmount;\\n\\n    //address => Number of has been minted\\n    mapping(address => uint256) public minted;\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _baseURI,\\n        address _thesaurus,\\n        uint256 _price,\\n        uint256 _orangeAmount,\\n        uint256 _blueAmount,\\n        uint256 _greyAmount,\\n        bytes32 _merkleRoot,\\n        uint256 _mintStartTime\\n    ) {\\n        initialize(\\n            _name,\\n            _symbol,\\n            _baseURI,\\n            _thesaurus,\\n            _price,\\n            _orangeAmount,\\n            _blueAmount,\\n            _greyAmount,\\n            _merkleRoot,\\n            _mintStartTime\\n        );\\n    }\\n\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _baseURI,\\n        address _thesaurus,\\n        uint256 _price,\\n        uint256 _orangeAmount,\\n        uint256 _blueAmount,\\n        uint256 _greyAmount,\\n        bytes32 _merkleRoot,\\n        uint256 _mintStartTime\\n    ) public initializer {\\n        __ERC721_init(_name, _symbol);\\n        __Ownable_init();\\n        baseURI = _baseURI;\\n        thesaurus = IThesaurus(_thesaurus);\\n        price = _price;\\n        typeAmount[GREY_TYPE] = _greyAmount;\\n        typeAmount[BLUE_TYPE] = _blueAmount;\\n        typeAmount[ORANGE_TYPE] = _orangeAmount;\\n        merkleRoot = _merkleRoot;\\n        mintStartTime = _mintStartTime;\\n    }\\n\\n    // ============= view function =============\\n\\n    function tokenURI(uint256 _tokenId) public view override returns (string memory) {\\n        require(_exists(_tokenId), \\\"ArtDriver: URI query for nonexistent token\\\");\\n        return\\n            string(\\n                abi.encodePacked(\\n                    baseURI,\\n                    \\\"/\\\",\\n                    Strings.toString(_tokenId),\\n                    \\\"/\\\",\\n                    Strings.toString(types[_tokenId]),\\n                    \\\"/\\\",\\n                    verb[_tokenId],\\n                    \\\"/\\\",\\n                    adj[_tokenId],\\n                    \\\"/\\\",\\n                    noun[_tokenId],\\n                    \\\"/\\\",\\n                    added[_tokenId]\\n                )\\n            );\\n    }\\n\\n    function verifyProof(\\n        bytes32[] memory _proof,\\n        address _recipient,\\n        uint256 _amount\\n    ) public view returns (bool) {\\n        bytes32 _data = keccak256(abi.encode(_recipient, _amount));\\n        return MerkleProofUpgradeable.verify(_proof, merkleRoot, _data);\\n    }\\n\\n    function freeMintAmount(address _player) external view returns (uint256) {\\n        return allowedMintAmount[_player];\\n    }\\n\\n    // ============= write function =============\\n\\n    function mint(address _player, uint256 _amount) external payable returns (uint256[] memory) {\\n        if (msg.sender != owner()) {\\n            require(\\n                block.timestamp >= mintStartTime || allowedMintAmount[_player] > 0,\\n                \\\"ArtDriver: Non-whitelisted users have not yet opened mint\\\"\\n            );\\n            if (block.timestamp < mintStartTime && allowedMintAmount[_player] < _amount)\\n                _amount = allowedMintAmount[_player];\\n\\n            uint256 _payAmount;\\n            if (_amount >= allowedMintAmount[_player]) {\\n                _payAmount = _amount - allowedMintAmount[_player];\\n                allowedMintAmount[_player] = 0;\\n            } else {\\n                allowedMintAmount[_player] -= _amount;\\n            }\\n            require(msg.value >= (price * _payAmount), \\\"ArtDriver: msg.value Deficiency\\\");\\n        }\\n\\n        uint256[] memory tokensId = new uint256[](_amount);\\n        for (uint256 i = 0; i < _amount; i++) {\\n            tokensId[i] = _mint(_player);\\n        }\\n        return tokensId;\\n    }\\n\\n    function refreshWords(uint256 _tokenId) external {\\n        require(_exists(_tokenId), \\\"ArtDriver: URI query for nonexistent token\\\");\\n        require(!locked[_tokenId], \\\"ArtDriver: token is locked\\\");\\n        require(ownerOf(_tokenId) == msg.sender, \\\"ArtDriver: You are not owner\\\");\\n\\n        (string memory _verb, string memory _adj, string memory _noun) = thesaurus.randomWords(totalSupply());\\n        verb[_tokenId] = _verb;\\n        adj[_tokenId] = _adj;\\n        noun[_tokenId] = _noun;\\n\\n        emit RefreshWords(_tokenId, _verb, _adj, _noun);\\n    }\\n\\n    function lock(uint256 _tokenId) external {\\n        require(_exists(_tokenId), \\\"ArtDriver: URI query for nonexistent token\\\");\\n        require(!locked[_tokenId], \\\"ArtDriver: token is locked\\\");\\n        require(ownerOf(_tokenId) == msg.sender, \\\"ArtDriver: You are not owner\\\");\\n\\n        locked[_tokenId] = true;\\n        emit Locked(_tokenId);\\n    }\\n\\n    function addWord(\\n        uint256 _tokenId,\\n        uint8 _type,\\n        string memory _word\\n    ) external {\\n        require(ownerOf(_tokenId) == msg.sender, \\\"ArtDriverr: You are not owner\\\");\\n        require(bytes(added[_tokenId]).length == 0, \\\"ArtDriverr: token is added\\\");\\n        require(bytes(_word).length < 30 && bytes(_word).length > 0, \\\"ArtDriver: word minimum 0, maximum 30 characters\\\");\\n\\n        added[_tokenId] = _word;\\n\\n        uint256 _weight;\\n        if (types[_tokenId] == GREY_TYPE) {\\n            _weight = 1;\\n        } else if (types[_tokenId] == BLUE_TYPE) {\\n            _weight = 5;\\n        } else if (types[_tokenId] == ORANGE_TYPE) {\\n            _weight = thesaurus.totalWordsAmount().div(100);\\n        } else {\\n            require(\\n                false,\\n                string(abi.encodePacked(\\\"ArtDriver: There is no such type [\\\", Strings.toString(_type), \\\" ]\\\"))\\n            );\\n        }\\n\\n        thesaurus.addWord(_type, _weight, _word);\\n        emit AddWord(_tokenId, _weight, _word);\\n    }\\n\\n    function claimMintAmount(\\n        address _recipient,\\n        bytes32[] memory _proof,\\n        uint256 _amount\\n    ) external {\\n        require(!claimed[_recipient], \\\"ArtDriver: This address is claimed\\\");\\n        require(verifyProof(_proof, _recipient, _amount), \\\"ArtDriver: The proof could not be verified.\\\");\\n\\n        allowedMintAmount[_recipient] = _amount;\\n        claimed[_recipient] = true;\\n        emit ClaimMintAmount(_recipient, _amount);\\n    }\\n\\n    // ============= owner function =============\\n\\n    function setPrice(uint256 _price) external onlyOwner {\\n        uint256 _old = price;\\n        price = _price;\\n        emit NewPrice(_old, _price);\\n    }\\n\\n    function transferEth(address _recipient, uint256 _amount) external payable onlyOwner {\\n        payable(_recipient).transfer(_amount);\\n        emit TransferEth(_recipient, _amount);\\n    }\\n\\n    // ============= internal function =============\\n\\n    function _mint(address _player) internal returns (uint256 _newTokenId) {\\n        _newTokenId = _tokenIds.current();\\n\\n        //words\\n        (string memory _verb, string memory _adj, string memory _noun) = thesaurus.randomWords(totalSupply());\\n        verb[_newTokenId] = _verb;\\n        adj[_newTokenId] = _adj;\\n        noun[_newTokenId] = _noun;\\n\\n        //type\\n        uint8 _type = _randomType(_newTokenId);\\n        types[_newTokenId] = _type;\\n        typeAmount[_type] -= 1;\\n\\n        minted[_player] += 1;\\n\\n        _mint(_player, _newTokenId);\\n\\n        _tokenIds.increment();\\n        emit Mint(_newTokenId, _player, _verb, _adj, _noun, _type);\\n    }\\n\\n    function _randomType(uint256 _tokenId) private view returns (uint8 _type) {\\n        if (typeAmount[BLUE_TYPE] == 0 && typeAmount[ORANGE_TYPE] == 0) return GREY_TYPE;\\n\\n        // 90 : 9 : 1, <=90: GREY_TYPE, 91-99: BLUE_TYPE, 100: ORANGE_TYPE\\n        uint256 _randomNum = 100;\\n        uint8 _random = Random.random8(1, _randomNum, _tokenId);\\n\\n        if (_random == 100) _type = ORANGE_TYPE;\\n        else if (100 > _random && 90 < _random) _type = BLUE_TYPE;\\n        else _type = GREY_TYPE;\\n\\n        if (_type == ORANGE_TYPE && typeAmount[ORANGE_TYPE] == 0) return GREY_TYPE;\\n        if (_type == BLUE_TYPE && typeAmount[BLUE_TYPE] == 0) return GREY_TYPE;\\n    }\\n\\n    // ============= base function =============\\n\\n    fallback() external payable {}\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xe98bc892531f9c0a090e9eb7e8fa29fddb55a757d32ccb4f415460bf20d9594c\",\"license\":\"MIT\"},\"contracts/interface/IThesaurus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IThesaurus {\\n    function addWord(\\n        uint8 _type,\\n        uint256 _weight,\\n        string memory _content\\n    ) external;\\n\\n    function totalWordsAmount() external view returns (uint256);\\n\\n    function randomWords(uint256)\\n        external\\n        view\\n        returns (\\n            string memory _verb,\\n            string memory _adj,\\n            string memory _noun\\n        );\\n\\n    function VERB_TYPE() external pure returns (uint8);\\n\\n    function ADJ_TYPE() external pure returns (uint8);\\n\\n    function NOUN_TYPE() external pure returns (uint8);\\n}\\n\",\"keccak256\":\"0x4cd2f85b67018e957e9e62be6c2eb998aa34fc5021598e12bf48939a1abe1864\",\"license\":\"MIT\"},\"contracts/lib/ArtDriverEvent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nabstract contract ArtDriverEvent {\\n    event Mint(uint256 tokenId, address player, string verb, string adj, string noun, uint8 types);\\n    event RefreshWords(uint256 tokenId, string verb, string adj, string noun);\\n    event Locked(uint256 tokenId);\\n    event AddWord(uint256 tokenId, uint256 weight, string word);\\n    event NewDefAllowedMintAmount(uint256 _old, uint256 _new);\\n    event NewPrice(uint256 _old, uint256 _new);\\n    event TransferEth(address _recipient, uint256 _amount);\\n    event ClaimMintAmount(address _recipient, uint256 _amount);\\n}\\n\",\"keccak256\":\"0x31284a83fd7f6b6260541a671859eeac9785882b0a391f98f28bc8171fcb25c6\",\"license\":\"MIT\"},\"contracts/utils/Array.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary Array {\\n    function removeEmpty(uint8[] memory b) internal pure returns (uint8[] memory) {\\n        uint256 count;\\n        for (uint256 i = 0; i < b.length; i++) {\\n            if (b[i] != uint8(0)) {\\n                count++;\\n            }\\n        }\\n        uint8[] memory a = new uint8[](count);\\n        uint256 j;\\n        for (uint256 i = 0; i < b.length; i++) {\\n            if (b[i] == uint8(0)) {\\n                continue;\\n            }\\n            a[j] = b[i];\\n            j++;\\n        }\\n        return a;\\n    }\\n}\\n\",\"keccak256\":\"0xc5a10483848b21ef8a4afc7dc79f07a97cefffd5038f027c6f69c5d800e66b94\",\"license\":\"MIT\"},\"contracts/utils/Random.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nlibrary Random {\\n    function random(\\n        uint256 _from,\\n        uint256 _to,\\n        uint256 _nonce\\n    ) internal view returns (uint256) {\\n        uint256 randNonce = uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, _nonce)));\\n        return (uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, randNonce))) % _to) + _from;\\n    }\\n\\n    function random8(\\n        uint256 _from,\\n        uint256 _to,\\n        uint256 _nonce\\n    ) internal view returns (uint8) {\\n        return uint8(random(_from, _to, _nonce));\\n    }\\n}\\n\",\"keccak256\":\"0x2a137e4612dc8f00053c6c0b12c27704ad0bb92957b3ec08457dbf286477fa0e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620040e2380380620040e283398101604081905262000034916200060a565b620000488a8a8a8a8a8a8a8a8a8a62000058565b5050505050505050505062000727565b600054610100900460ff1615808015620000795750600054600160ff909116105b80620000a9575062000096306200025860201b62001cf01760201c565b158015620000a9575060005460ff166001145b620001125760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801562000136576000805461ff0019166101001790555b620001428b8b62000267565b6200014c620002d3565b8851620001619060fd9060208c01906200047a565b5060fc80546001600160a01b0319166001600160a01b038a1617905560fe8790556101016020527f78cc36da285c6bcc00b8ad0e7f4d07c0a99aacb1489e96b1bd1973c526600fea8490557f34f48ecb70d0b9ceaba0af892a975df1c49d4004ccc0ec2341be01c6ba8eb11c85905560036000527f516f9dc56cb0fb57c0adc39ead1822888cd1b1d04946ab546ff9ab29341eed3986905560ff83905561010082905580156200024b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050505050565b6001600160a01b03163b151590565b600054610100900460ff16620002c35760405162461bcd60e51b815260206004820152602b6024820152600080516020620040c283398151915260448201526a6e697469616c697a696e6760a81b606482015260840162000109565b620002cf82826200033b565b5050565b600054610100900460ff166200032f5760405162461bcd60e51b815260206004820152602b6024820152600080516020620040c283398151915260448201526a6e697469616c697a696e6760a81b606482015260840162000109565b62000339620003c7565b565b600054610100900460ff16620003975760405162461bcd60e51b815260206004820152602b6024820152600080516020620040c283398151915260448201526a6e697469616c697a696e6760a81b606482015260840162000109565b8151620003ac9060979060208501906200047a565b508051620003c29060989060208401906200047a565b505050565b600054610100900460ff16620004235760405162461bcd60e51b815260206004820152602b6024820152600080516020620040c283398151915260448201526a6e697469616c697a696e6760a81b606482015260840162000109565b6200033933603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200048890620006ea565b90600052602060002090601f016020900481019282620004ac5760008555620004f7565b82601f10620004c757805160ff1916838001178555620004f7565b82800160010185558215620004f7579182015b82811115620004f7578251825591602001919060010190620004da565b506200050592915062000509565b5090565b5b808211156200050557600081556001016200050a565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200054857600080fd5b81516001600160401b038082111562000565576200056562000520565b604051601f8301601f19908116603f0116810190828211818310171562000590576200059062000520565b81604052838152602092508683858801011115620005ad57600080fd5b600091505b83821015620005d15785820183015181830184015290820190620005b2565b83821115620005e35760008385830101525b9695505050505050565b80516001600160a01b03811681146200060557600080fd5b919050565b6000806000806000806000806000806101408b8d0312156200062b57600080fd5b8a516001600160401b03808211156200064357600080fd5b620006518e838f0162000536565b9b5060208d01519150808211156200066857600080fd5b620006768e838f0162000536565b9a5060408d01519150808211156200068d57600080fd5b506200069c8d828e0162000536565b985050620006ad60608c01620005ed565b965060808b0151955060a08b0151945060c08b0151935060e08b015192506101008b015191506101208b015190509295989b9194979a5092959850565b600181811c90821680620006ff57607f821691505b602082108114156200072157634e487b7160e01b600052602260045260246000fd5b50919050565b61398b80620007376000396000f3fe6080604052600436106102535760003560e01c806391b7f5ed11610138578063ca4e55e7116100b0578063e9bb84c211610077578063e9bb84c214610786578063ed76bd0b14610799578063f2807023146107c7578063f2fde38b146107f5578063f3ec6a7914610815578063fa4ad06d1461084c57005b8063ca4e55e71461069a578063cefbfa36146106ba578063dd467064146106fd578063e20b21271461071d578063e985e9c51461073d57005b8063a22cb465116100ff578063a22cb465146105b8578063b45a3c0e146105d8578063b88d4fde14610609578063b9fd27bd14610629578063c87b56dd14610649578063c884ef831461066957005b806391b7f5ed14610536578063929943b114610556578063931e2e491461057657806395d89b411461058d578063a035b1fe146105a257005b806336b04f26116101cb5780636352211e116101925780636352211e1461048e5780636c0360eb146104ae57806370a08231146104c3578063715018a6146104e3578063726d20fe146104f85780638da5cb5b1461051857005b806336b04f26146103ee57806340c10f191461040e57806342842e0e1461042e5780634f6ccce71461044e57806355a498c81461046e57005b80631e7269c51161021a5780631e7269c51461032a578063227eac8b1461035857806322abd4e31461037857806323b872dd146103985780632eb4a7ab146103b85780632f745c59146103ce57005b806301ffc9a71461025c57806306fdde0314610291578063081812fc146102b3578063095ea7b3146102eb57806318160ddd1461030b57005b3661025a57005b005b34801561026857600080fd5b5061027c610277366004612d9f565b61086c565b60405190151581526020015b60405180910390f35b34801561029d57600080fd5b506102a6610897565b6040516102889190612e14565b3480156102bf57600080fd5b506102d36102ce366004612e27565b610929565b6040516001600160a01b039091168152602001610288565b3480156102f757600080fd5b5061025a610306366004612e5c565b610950565b34801561031757600080fd5b5060cb545b604051908152602001610288565b34801561033657600080fd5b5061031c610345366004612e86565b61010a6020526000908152604090205481565b34801561036457600080fd5b5061025a610373366004612f7f565b610a6b565b34801561038457600080fd5b5060fc546102d3906001600160a01b031681565b3480156103a457600080fd5b5061025a6103b3366004612fd6565b610db9565b3480156103c457600080fd5b5061031c60ff5481565b3480156103da57600080fd5b5061031c6103e9366004612e5c565b610dea565b3480156103fa57600080fd5b506102a6610409366004612e27565b610e80565b61042161041c366004612e5c565b610f1b565b6040516102889190613012565b34801561043a57600080fd5b5061025a610449366004612fd6565b6111b4565b34801561045a57600080fd5b5061031c610469366004612e27565b6111cf565b34801561047a57600080fd5b506102a6610489366004612e27565b611262565b34801561049a57600080fd5b506102d36104a9366004612e27565b61127c565b3480156104ba57600080fd5b506102a66112dc565b3480156104cf57600080fd5b5061031c6104de366004612e86565b6112e9565b3480156104ef57600080fd5b5061025a61136f565b34801561050457600080fd5b5061027c6105133660046130d6565b611383565b34801561052457600080fd5b506033546001600160a01b03166102d3565b34801561054257600080fd5b5061025a610551366004612e27565b6113d2565b34801561056257600080fd5b5061025a61057136600461311d565b611420565b34801561058257600080fd5b5061031c6101005481565b34801561059957600080fd5b506102a661156d565b3480156105ae57600080fd5b5061031c60fe5481565b3480156105c457600080fd5b5061025a6105d3366004613174565b61157c565b3480156105e457600080fd5b5061027c6105f3366004612e27565b6101066020526000908152604090205460ff1681565b34801561061557600080fd5b5061025a6106243660046131b0565b61158b565b34801561063557600080fd5b506102a6610644366004612e27565b6115c3565b34801561065557600080fd5b506102a6610664366004612e27565b6115dd565b34801561067557600080fd5b5061027c610684366004612e86565b6101086020526000908152604090205460ff1681565b3480156106a657600080fd5b5061025a6106b536600461322c565b611690565b3480156106c657600080fd5b506106eb6106d5366004612e27565b6101076020526000908152604090205460ff1681565b60405160ff9091168152602001610288565b34801561070957600080fd5b5061025a610718366004612e27565b61186b565b34801561072957600080fd5b5061025a610738366004612e27565b6119b6565b34801561074957600080fd5b5061027c6107583660046132fc565b6001600160a01b039182166000908152609c6020908152604080832093909416825291909152205460ff1690565b61025a610794366004612e5c565b611bdf565b3480156107a557600080fd5b5061031c6107b4366004612e86565b6101096020526000908152604090205481565b3480156107d357600080fd5b5061031c6107e236600461332f565b6101016020526000908152604090205481565b34801561080157600080fd5b5061025a610810366004612e86565b611c5d565b34801561082157600080fd5b5061031c610830366004612e86565b6001600160a01b03166000908152610109602052604090205490565b34801561085857600080fd5b506102a6610867366004612e27565b611cd6565b60006001600160e01b0319821663780e9d6360e01b1480610891575061089182611cff565b92915050565b6060609780546108a69061334a565b80601f01602080910402602001604051908101604052809291908181526020018280546108d29061334a565b801561091f5780601f106108f45761010080835404028352916020019161091f565b820191906000526020600020905b81548152906001019060200180831161090257829003601f168201915b5050505050905090565b600061093482611d4f565b506000908152609b60205260409020546001600160a01b031690565b600061095b8261127c565b9050806001600160a01b0316836001600160a01b031614156109ce5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806109ea57506109ea8133610758565b610a5c5760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016109c5565b610a668383611dae565b505050565b33610a758461127c565b6001600160a01b031614610acb5760405162461bcd60e51b815260206004820152601d60248201527f417274447269766572723a20596f7520617265206e6f74206f776e657200000060448201526064016109c5565b6000838152610105602052604090208054610ae59061334a565b159050610b345760405162461bcd60e51b815260206004820152601a60248201527f417274447269766572723a20746f6b656e20697320616464656400000000000060448201526064016109c5565b601e8151108015610b46575060008151115b610bab5760405162461bcd60e51b815260206004820152603060248201527f4172744472697665723a20776f7264206d696e696d756d20302c206d6178696d60448201526f756d203330206368617261637465727360801b60648201526084016109c5565b6000838152610105602090815260409091208251610bcb92840190612cf0565b506000838152610107602052604081205460ff1660011415610bef57506001610d12565b6000848152610107602052604090205460ff1660021415610c1257506005610d12565b6000848152610107602052604090205460ff1660031415610cc557610cbe606460fc60009054906101000a90046001600160a01b03166001600160a01b03166366ac564a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c8057600080fd5b505afa158015610c94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb89190613385565b90611e1c565b9050610d12565b6000610cd38460ff16611e2f565b604051602001610ce3919061339e565b60405160208183030381529060405290610d105760405162461bcd60e51b81526004016109c59190612e14565b505b60fc5460405163012b1d7b60e21b81526001600160a01b03909116906304ac75ec90610d46908690859087906004016133fa565b600060405180830381600087803b158015610d6057600080fd5b505af1158015610d74573d6000803e3d6000fd5b505050507ffdac6959a3a5882f20eeb4ea8e8a0007e1e99d29434bed07ce50b0d675d1f60f848284604051610dab9392919061341c565b60405180910390a150505050565b610dc33382611f35565b610ddf5760405162461bcd60e51b81526004016109c59061343b565b610a66838383611fb3565b6000610df5836112e9565b8210610e575760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016109c5565b506001600160a01b0391909116600090815260c960209081526040808320938352929052205490565b6101036020526000908152604090208054610e9a9061334a565b80601f0160208091040260200160405190810160405280929190818152602001828054610ec69061334a565b8015610f135780601f10610ee857610100808354040283529160200191610f13565b820191906000526020600020905b815481529060010190602001808311610ef657829003601f168201915b505050505081565b6060610f2f6033546001600160a01b031690565b6001600160a01b0316336001600160a01b031614611122576101005442101580610f7157506001600160a01b0383166000908152610109602052604090205415155b610fe35760405162461bcd60e51b815260206004820152603960248201527f4172744472697665723a204e6f6e2d77686974656c697374656420757365727360448201527f2068617665206e6f7420796574206f70656e6564206d696e740000000000000060648201526084016109c5565b610100544210801561100d57506001600160a01b0383166000908152610109602052604090205482115b1561102f576001600160a01b0383166000908152610109602052604090205491505b6001600160a01b038316600090815261010960205260408120548310611094576001600160a01b03841660009081526101096020526040902054611073908461349f565b6001600160a01b0385166000908152610109602052604081205590506110c3565b6001600160a01b03841660009081526101096020526040812080548592906110bd90849061349f565b90915550505b8060fe546110d191906134b6565b3410156111205760405162461bcd60e51b815260206004820152601f60248201527f4172744472697665723a206d73672e76616c756520446566696369656e63790060448201526064016109c5565b505b60008267ffffffffffffffff81111561113d5761113d612eb2565b604051908082528060200260200182016040528015611166578160200160208202803683370190505b50905060005b838110156111ac5761117d8561215a565b82828151811061118f5761118f6134d5565b6020908102919091010152806111a4816134eb565b91505061116c565b509392505050565b610a668383836040518060200160405280600081525061158b565b60006111da60cb5490565b821061123d5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016109c5565b60cb8281548110611250576112506134d5565b90600052602060002001549050919050565b6101026020526000908152604090208054610e9a9061334a565b6000818152609960205260408120546001600160a01b0316806108915760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016109c5565b60fd8054610e9a9061334a565b60006001600160a01b0382166113535760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016109c5565b506001600160a01b03166000908152609a602052604090205490565b61137761234c565b61138160006123a6565b565b604080516001600160a01b038416602082015290810182905260009081906060016040516020818303038152906040528051906020012090506113c98560ff54836123f8565b95945050505050565b6113da61234c565b60fe80549082905560408051828152602081018490527fb9362b96e28efbb7a7e63bb4a97faf9924ec0394635feff8588a6ae2a5f784fe91015b60405180910390a15050565b6001600160a01b0383166000908152610108602052604090205460ff16156114955760405162461bcd60e51b815260206004820152602260248201527f4172744472697665723a2054686973206164647265737320697320636c61696d604482015261195960f21b60648201526084016109c5565b6114a0828483611383565b6115005760405162461bcd60e51b815260206004820152602b60248201527f4172744472697665723a205468652070726f6f6620636f756c64206e6f74206260448201526a32903b32b934b334b2b21760a91b60648201526084016109c5565b6001600160a01b038316600081815261010960209081526040808320859055610108825291829020805460ff19166001179055815192835282018390527fba5ec43de175afadf4606466cf5d34a6a29fe6bd172df29a0476e8eadb7b38e7910160405180910390a1505050565b6060609880546108a69061334a565b61158733838361240e565b5050565b6115953383611f35565b6115b15760405162461bcd60e51b81526004016109c59061343b565b6115bd848484846124dd565b50505050565b6101046020526000908152604090208054610e9a9061334a565b6000818152609960205260409020546060906001600160a01b03166116145760405162461bcd60e51b81526004016109c590613506565b60fd61161f83611e2f565b6000848152610107602052604090205461163b9060ff16611e2f565b60008581526101026020908152604080832061010383528184206101048452828520610105855294839020925161167a989796959294919391016135ea565b6040516020818303038152906040529050919050565b600054610100900460ff16158080156116b05750600054600160ff909116105b806116ca5750303b1580156116ca575060005460ff166001145b61172d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016109c5565b6000805460ff191660011790558015611750576000805461ff0019166101001790555b61175a8b8b612510565b611762612541565b88516117759060fd9060208c0190612cf0565b5060fc80546001600160a01b0319166001600160a01b038a1617905560fe8790556101016020527f78cc36da285c6bcc00b8ad0e7f4d07c0a99aacb1489e96b1bd1973c526600fea8490557f34f48ecb70d0b9ceaba0af892a975df1c49d4004ccc0ec2341be01c6ba8eb11c85905560036000527f516f9dc56cb0fb57c0adc39ead1822888cd1b1d04946ab546ff9ab29341eed3986905560ff839055610100829055801561185e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050505050565b6000818152609960205260409020546001600160a01b031661189f5760405162461bcd60e51b81526004016109c590613506565b6000818152610106602052604090205460ff16156118ff5760405162461bcd60e51b815260206004820152601a60248201527f4172744472697665723a20746f6b656e206973206c6f636b656400000000000060448201526064016109c5565b336119098261127c565b6001600160a01b03161461195f5760405162461bcd60e51b815260206004820152601c60248201527f4172744472697665723a20596f7520617265206e6f74206f776e65720000000060448201526064016109c5565b6000818152610106602052604090819020805460ff19166001179055517f032bc66be43dbccb7487781d168eb7bda224628a3b2c3388bdf69b532a3a1611906119ab9083815260200190565b60405180910390a150565b6000818152609960205260409020546001600160a01b03166119ea5760405162461bcd60e51b81526004016109c590613506565b6000818152610106602052604090205460ff1615611a4a5760405162461bcd60e51b815260206004820152601a60248201527f4172744472697665723a20746f6b656e206973206c6f636b656400000000000060448201526064016109c5565b33611a548261127c565b6001600160a01b031614611aaa5760405162461bcd60e51b815260206004820152601c60248201527f4172744472697665723a20596f7520617265206e6f74206f776e65720000000060448201526064016109c5565b60fc54600090819081906001600160a01b031663beff730f611acb60cb5490565b6040518263ffffffff1660e01b8152600401611ae991815260200190565b60006040518083038186803b158015611b0157600080fd5b505afa158015611b15573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b3d91908101906136ce565b6000878152610102602090815260409091208451949750929550909350611b679290860190612cf0565b506000848152610103602090815260409091208351611b8892850190612cf0565b506000848152610104602090815260409091208251611ba992840190612cf0565b507f57f3798e8ce1fb9ea6eea73c23e95f2e6fabfbc4c8dd4586374c5c176393b74084848484604051610dab949392919061374c565b611be761234c565b6040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015611c1d573d6000803e3d6000fd5b50604080516001600160a01b0384168152602081018390527fd9b66890b56321a19d7a216dd918f8c0d4023759afc4088deb9be15aca68ece29101611414565b611c6561234c565b6001600160a01b038116611cca5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016109c5565b611cd3816123a6565b50565b6101056020526000908152604090208054610e9a9061334a565b6001600160a01b03163b151590565b60006001600160e01b031982166380ac58cd60e01b1480611d3057506001600160e01b03198216635b5e139f60e01b145b8061089157506301ffc9a760e01b6001600160e01b0319831614610891565b6000818152609960205260409020546001600160a01b0316611cd35760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016109c5565b6000818152609b6020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611de38261127c565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611e2882846137a1565b9392505050565b606081611e535750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611e7d5780611e67816134eb565b9150611e769050600a836137a1565b9150611e57565b60008167ffffffffffffffff811115611e9857611e98612eb2565b6040519080825280601f01601f191660200182016040528015611ec2576020820181803683370190505b5090505b8415611f2d57611ed760018361349f565b9150611ee4600a866137b5565b611eef9060306137c9565b60f81b818381518110611f0457611f046134d5565b60200101906001600160f81b031916908160001a905350611f26600a866137a1565b9450611ec6565b949350505050565b600080611f418361127c565b9050806001600160a01b0316846001600160a01b03161480611f8857506001600160a01b038082166000908152609c602090815260408083209388168352929052205460ff165b80611f2d5750836001600160a01b0316611fa184610929565b6001600160a01b031614949350505050565b826001600160a01b0316611fc68261127c565b6001600160a01b03161461202a5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016109c5565b6001600160a01b03821661208c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016109c5565b612097838383612570565b6120a2600082611dae565b6001600160a01b0383166000908152609a602052604081208054600192906120cb90849061349f565b90915550506001600160a01b0382166000908152609a602052604081208054600192906120f99084906137c9565b909155505060008181526099602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600061216560fb5490565b60fc54909150600090819081906001600160a01b031663beff730f61218960cb5490565b6040518263ffffffff1660e01b81526004016121a791815260200190565b60006040518083038186803b1580156121bf57600080fd5b505afa1580156121d3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526121fb91908101906136ce565b60008781526101026020908152604090912084519497509295509093506122259290860190612cf0565b50600084815261010360209081526040909120835161224692850190612cf0565b50600084815261010460209081526040909120825161226792840190612cf0565b50600061227385612628565b600086815261010760209081526040808320805460ff191660ff86169081179091558352610101909152812080549293506001929091906122b590849061349f565b90915550506001600160a01b038616600090815261010a602052604081208054600192906122e49084906137c9565b909155506122f49050868661278a565b61230260fb80546001019055565b7f06d462992b94a71271caecaa4d7031f82eed46383a2d5c24c15f7ab75b9a7a9485878686868660405161233b969594939291906137e1565b60405180910390a150505050919050565b6033546001600160a01b031633146113815760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109c5565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008261240585846128d8565b14949350505050565b816001600160a01b0316836001600160a01b031614156124705760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016109c5565b6001600160a01b038381166000818152609c6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6124e8848484611fb3565b6124f48484848461291d565b6115bd5760405162461bcd60e51b81526004016109c590613848565b600054610100900460ff166125375760405162461bcd60e51b81526004016109c59061389a565b6115878282612a2a565b600054610100900460ff166125685760405162461bcd60e51b81526004016109c59061389a565b611381612a78565b6001600160a01b0383166125cb576125c68160cb8054600083815260cc60205260408120829055600182018355919091527fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb0155565b6125ee565b816001600160a01b0316836001600160a01b0316146125ee576125ee8382612aa8565b6001600160a01b03821661260557610a6681612b45565b826001600160a01b0316826001600160a01b031614610a6657610a668282612bf4565b600260009081526101016020527f34f48ecb70d0b9ceaba0af892a975df1c49d4004ccc0ec2341be01c6ba8eb11c5415801561268e575060036000526101016020527f516f9dc56cb0fb57c0adc39ead1822888cd1b1d04946ab546ff9ab29341eed3954155b1561269b57506001919050565b606460006126ab60018386612c38565b90508060ff16606414156126c257600392506126eb565b8060ff1660641180156126d857508060ff16605a105b156126e657600292506126eb565b600192505b60ff83166003148015612728575060036000526101016020527f516f9dc56cb0fb57c0adc39ead1822888cd1b1d04946ab546ff9ab29341eed3954155b15612737575060019392505050565b60ff83166002148015612774575060026000526101016020527f34f48ecb70d0b9ceaba0af892a975df1c49d4004ccc0ec2341be01c6ba8eb11c54155b15612783575060019392505050565b5050919050565b6001600160a01b0382166127e05760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016109c5565b6000818152609960205260409020546001600160a01b0316156128455760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016109c5565b61285160008383612570565b6001600160a01b0382166000908152609a6020526040812080546001929061287a9084906137c9565b909155505060008181526099602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600081815b84518110156111ac57612909828683815181106128fc576128fc6134d5565b6020026020010151612c45565b915080612915816134eb565b9150506128dd565b60006001600160a01b0384163b15612a1f57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906129619033908990889088906004016138e5565b602060405180830381600087803b15801561297b57600080fd5b505af19250505080156129ab575060408051601f3d908101601f191682019092526129a891810190613922565b60015b612a05573d8080156129d9576040519150601f19603f3d011682016040523d82523d6000602084013e6129de565b606091505b5080516129fd5760405162461bcd60e51b81526004016109c590613848565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611f2d565b506001949350505050565b600054610100900460ff16612a515760405162461bcd60e51b81526004016109c59061389a565b8151612a64906097906020850190612cf0565b508051610a66906098906020840190612cf0565b600054610100900460ff16612a9f5760405162461bcd60e51b81526004016109c59061389a565b611381336123a6565b60006001612ab5846112e9565b612abf919061349f565b600083815260ca6020526040902054909150808214612b12576001600160a01b038416600090815260c960209081526040808320858452825280832054848452818420819055835260ca90915290208190555b50600091825260ca602090815260408084208490556001600160a01b03909416835260c981528383209183525290812055565b60cb54600090612b579060019061349f565b600083815260cc602052604081205460cb8054939450909284908110612b7f57612b7f6134d5565b906000526020600020015490508060cb8381548110612ba057612ba06134d5565b600091825260208083209091019290925582815260cc909152604080822084905585825281205560cb805480612bd857612bd861393f565b6001900381819060005260206000200160009055905550505050565b6000612bff836112e9565b6001600160a01b03909316600090815260c960209081526040808320868452825280832085905593825260ca9052919091209190915550565b6000611f2d848484612c74565b6000818310612c61576000828152602084905260409020611e28565b6000838152602083905260409020611e28565b604080514260208083018290524483850181905260608085018790528551808603909101815260808501865280519083012060a085019390935260c084015260e08084018390528451808503909101815261010090930190935281519190920120600091908590612ce69086906137b5565b6113c991906137c9565b828054612cfc9061334a565b90600052602060002090601f016020900481019282612d1e5760008555612d64565b82601f10612d3757805160ff1916838001178555612d64565b82800160010185558215612d64579182015b82811115612d64578251825591602001919060010190612d49565b50612d70929150612d74565b5090565b5b80821115612d705760008155600101612d75565b6001600160e01b031981168114611cd357600080fd5b600060208284031215612db157600080fd5b8135611e2881612d89565b60005b83811015612dd7578181015183820152602001612dbf565b838111156115bd5750506000910152565b60008151808452612e00816020860160208601612dbc565b601f01601f19169290920160200192915050565b602081526000611e286020830184612de8565b600060208284031215612e3957600080fd5b5035919050565b80356001600160a01b0381168114612e5757600080fd5b919050565b60008060408385031215612e6f57600080fd5b612e7883612e40565b946020939093013593505050565b600060208284031215612e9857600080fd5b611e2882612e40565b803560ff81168114612e5757600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612ef157612ef1612eb2565b604052919050565b600067ffffffffffffffff821115612f1357612f13612eb2565b50601f01601f191660200190565b6000612f34612f2f84612ef9565b612ec8565b9050828152838383011115612f4857600080fd5b828260208301376000602084830101529392505050565b600082601f830112612f7057600080fd5b611e2883833560208501612f21565b600080600060608486031215612f9457600080fd5b83359250612fa460208501612ea1565b9150604084013567ffffffffffffffff811115612fc057600080fd5b612fcc86828701612f5f565b9150509250925092565b600080600060608486031215612feb57600080fd5b612ff484612e40565b925061300260208501612e40565b9150604084013590509250925092565b6020808252825182820181905260009190848201906040850190845b8181101561304a5783518352928401929184019160010161302e565b50909695505050505050565b600082601f83011261306757600080fd5b8135602067ffffffffffffffff82111561308357613083612eb2565b8160051b613092828201612ec8565b92835284810182019282810190878511156130ac57600080fd5b83870192505b848310156130cb578235825291830191908301906130b2565b979650505050505050565b6000806000606084860312156130eb57600080fd5b833567ffffffffffffffff81111561310257600080fd5b61310e86828701613056565b93505061300260208501612e40565b60008060006060848603121561313257600080fd5b61313b84612e40565b9250602084013567ffffffffffffffff81111561315757600080fd5b61316386828701613056565b925050604084013590509250925092565b6000806040838503121561318757600080fd5b61319083612e40565b9150602083013580151581146131a557600080fd5b809150509250929050565b600080600080608085870312156131c657600080fd5b6131cf85612e40565b93506131dd60208601612e40565b925060408501359150606085013567ffffffffffffffff81111561320057600080fd5b8501601f8101871361321157600080fd5b61322087823560208401612f21565b91505092959194509250565b6000806000806000806000806000806101408b8d03121561324c57600080fd5b8a3567ffffffffffffffff8082111561326457600080fd5b6132708e838f01612f5f565b9b5060208d013591508082111561328657600080fd5b6132928e838f01612f5f565b9a5060408d01359150808211156132a857600080fd5b506132b58d828e01612f5f565b9850506132c460608c01612e40565b999c989b50969960808101359860a0820135985060c0820135975060e082013596506101008201359550610120909101359350915050565b6000806040838503121561330f57600080fd5b61331883612e40565b915061332660208401612e40565b90509250929050565b60006020828403121561334157600080fd5b611e2882612ea1565b600181811c9082168061335e57607f821691505b6020821081141561337f57634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561339757600080fd5b5051919050565b7f4172744472697665723a205468657265206973206e6f20737563682074797065815261205b60f01b6020820152600082516133e1816022850160208701612dbc565b61205d60f01b6022939091019283015250602401919050565b60ff841681528260208201526060604082015260006113c96060830184612de8565b8381528260208201526060604082015260006113c96060830184612de8565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000828210156134b1576134b1613489565b500390565b60008160001904831182151516156134d0576134d0613489565b500290565b634e487b7160e01b600052603260045260246000fd5b60006000198214156134ff576134ff613489565b5060010190565b6020808252602a908201527f4172744472697665723a2055524920717565727920666f72206e6f6e657869736040820152693a32b73a103a37b5b2b760b11b606082015260800190565b8054600090600181811c908083168061356a57607f831692505b602080841082141561358c57634e487b7160e01b600052602260045260246000fd5b8180156135a057600181146135b1576135de565b60ff198616895284890196506135de565b60008881526020902060005b868110156135d65781548b8201529085019083016135bd565b505084890196505b50505050505092915050565b60006135f6828a613550565b602f60f81b8082528951613611816001850160208e01612dbc565b60019201918201819052885161362e816002850160208d01612dbc565b600292019182018190526136456003830189613550565b91508082526136576001830188613550565b91508082526136696001830187613550565b908152905061367b6001820185613550565b9a9950505050505050505050565b600082601f83011261369a57600080fd5b81516136a8612f2f82612ef9565b8181528460208386010111156136bd57600080fd5b611f2d826020830160208701612dbc565b6000806000606084860312156136e357600080fd5b835167ffffffffffffffff808211156136fb57600080fd5b61370787838801613689565b9450602086015191508082111561371d57600080fd5b61372987838801613689565b9350604086015191508082111561373f57600080fd5b50612fcc86828701613689565b8481526080602082015260006137656080830186612de8565b82810360408401526137778186612de8565b905082810360608401526130cb8185612de8565b634e487b7160e01b600052601260045260246000fd5b6000826137b0576137b061378b565b500490565b6000826137c4576137c461378b565b500690565b600082198211156137dc576137dc613489565b500190565b8681526001600160a01b038616602082015260c06040820181905260009061380b90830187612de8565b828103606084015261381d8187612de8565b905082810360808401526138318186612de8565b91505060ff831660a0830152979650505050505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061391890830184612de8565b9695505050505050565b60006020828403121561393457600080fd5b8151611e2881612d89565b634e487b7160e01b600052603160045260246000fdfea264697066735822122009e9ea5b7248fead8df50f1d8af087289e16604b3060d778ec9dcba7064d743064736f6c63430008090033496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069",
  "deployedBytecode": "0x6080604052600436106102535760003560e01c806391b7f5ed11610138578063ca4e55e7116100b0578063e9bb84c211610077578063e9bb84c214610786578063ed76bd0b14610799578063f2807023146107c7578063f2fde38b146107f5578063f3ec6a7914610815578063fa4ad06d1461084c57005b8063ca4e55e71461069a578063cefbfa36146106ba578063dd467064146106fd578063e20b21271461071d578063e985e9c51461073d57005b8063a22cb465116100ff578063a22cb465146105b8578063b45a3c0e146105d8578063b88d4fde14610609578063b9fd27bd14610629578063c87b56dd14610649578063c884ef831461066957005b806391b7f5ed14610536578063929943b114610556578063931e2e491461057657806395d89b411461058d578063a035b1fe146105a257005b806336b04f26116101cb5780636352211e116101925780636352211e1461048e5780636c0360eb146104ae57806370a08231146104c3578063715018a6146104e3578063726d20fe146104f85780638da5cb5b1461051857005b806336b04f26146103ee57806340c10f191461040e57806342842e0e1461042e5780634f6ccce71461044e57806355a498c81461046e57005b80631e7269c51161021a5780631e7269c51461032a578063227eac8b1461035857806322abd4e31461037857806323b872dd146103985780632eb4a7ab146103b85780632f745c59146103ce57005b806301ffc9a71461025c57806306fdde0314610291578063081812fc146102b3578063095ea7b3146102eb57806318160ddd1461030b57005b3661025a57005b005b34801561026857600080fd5b5061027c610277366004612d9f565b61086c565b60405190151581526020015b60405180910390f35b34801561029d57600080fd5b506102a6610897565b6040516102889190612e14565b3480156102bf57600080fd5b506102d36102ce366004612e27565b610929565b6040516001600160a01b039091168152602001610288565b3480156102f757600080fd5b5061025a610306366004612e5c565b610950565b34801561031757600080fd5b5060cb545b604051908152602001610288565b34801561033657600080fd5b5061031c610345366004612e86565b61010a6020526000908152604090205481565b34801561036457600080fd5b5061025a610373366004612f7f565b610a6b565b34801561038457600080fd5b5060fc546102d3906001600160a01b031681565b3480156103a457600080fd5b5061025a6103b3366004612fd6565b610db9565b3480156103c457600080fd5b5061031c60ff5481565b3480156103da57600080fd5b5061031c6103e9366004612e5c565b610dea565b3480156103fa57600080fd5b506102a6610409366004612e27565b610e80565b61042161041c366004612e5c565b610f1b565b6040516102889190613012565b34801561043a57600080fd5b5061025a610449366004612fd6565b6111b4565b34801561045a57600080fd5b5061031c610469366004612e27565b6111cf565b34801561047a57600080fd5b506102a6610489366004612e27565b611262565b34801561049a57600080fd5b506102d36104a9366004612e27565b61127c565b3480156104ba57600080fd5b506102a66112dc565b3480156104cf57600080fd5b5061031c6104de366004612e86565b6112e9565b3480156104ef57600080fd5b5061025a61136f565b34801561050457600080fd5b5061027c6105133660046130d6565b611383565b34801561052457600080fd5b506033546001600160a01b03166102d3565b34801561054257600080fd5b5061025a610551366004612e27565b6113d2565b34801561056257600080fd5b5061025a61057136600461311d565b611420565b34801561058257600080fd5b5061031c6101005481565b34801561059957600080fd5b506102a661156d565b3480156105ae57600080fd5b5061031c60fe5481565b3480156105c457600080fd5b5061025a6105d3366004613174565b61157c565b3480156105e457600080fd5b5061027c6105f3366004612e27565b6101066020526000908152604090205460ff1681565b34801561061557600080fd5b5061025a6106243660046131b0565b61158b565b34801561063557600080fd5b506102a6610644366004612e27565b6115c3565b34801561065557600080fd5b506102a6610664366004612e27565b6115dd565b34801561067557600080fd5b5061027c610684366004612e86565b6101086020526000908152604090205460ff1681565b3480156106a657600080fd5b5061025a6106b536600461322c565b611690565b3480156106c657600080fd5b506106eb6106d5366004612e27565b6101076020526000908152604090205460ff1681565b60405160ff9091168152602001610288565b34801561070957600080fd5b5061025a610718366004612e27565b61186b565b34801561072957600080fd5b5061025a610738366004612e27565b6119b6565b34801561074957600080fd5b5061027c6107583660046132fc565b6001600160a01b039182166000908152609c6020908152604080832093909416825291909152205460ff1690565b61025a610794366004612e5c565b611bdf565b3480156107a557600080fd5b5061031c6107b4366004612e86565b6101096020526000908152604090205481565b3480156107d357600080fd5b5061031c6107e236600461332f565b6101016020526000908152604090205481565b34801561080157600080fd5b5061025a610810366004612e86565b611c5d565b34801561082157600080fd5b5061031c610830366004612e86565b6001600160a01b03166000908152610109602052604090205490565b34801561085857600080fd5b506102a6610867366004612e27565b611cd6565b60006001600160e01b0319821663780e9d6360e01b1480610891575061089182611cff565b92915050565b6060609780546108a69061334a565b80601f01602080910402602001604051908101604052809291908181526020018280546108d29061334a565b801561091f5780601f106108f45761010080835404028352916020019161091f565b820191906000526020600020905b81548152906001019060200180831161090257829003601f168201915b5050505050905090565b600061093482611d4f565b506000908152609b60205260409020546001600160a01b031690565b600061095b8261127c565b9050806001600160a01b0316836001600160a01b031614156109ce5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806109ea57506109ea8133610758565b610a5c5760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016109c5565b610a668383611dae565b505050565b33610a758461127c565b6001600160a01b031614610acb5760405162461bcd60e51b815260206004820152601d60248201527f417274447269766572723a20596f7520617265206e6f74206f776e657200000060448201526064016109c5565b6000838152610105602052604090208054610ae59061334a565b159050610b345760405162461bcd60e51b815260206004820152601a60248201527f417274447269766572723a20746f6b656e20697320616464656400000000000060448201526064016109c5565b601e8151108015610b46575060008151115b610bab5760405162461bcd60e51b815260206004820152603060248201527f4172744472697665723a20776f7264206d696e696d756d20302c206d6178696d60448201526f756d203330206368617261637465727360801b60648201526084016109c5565b6000838152610105602090815260409091208251610bcb92840190612cf0565b506000838152610107602052604081205460ff1660011415610bef57506001610d12565b6000848152610107602052604090205460ff1660021415610c1257506005610d12565b6000848152610107602052604090205460ff1660031415610cc557610cbe606460fc60009054906101000a90046001600160a01b03166001600160a01b03166366ac564a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c8057600080fd5b505afa158015610c94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb89190613385565b90611e1c565b9050610d12565b6000610cd38460ff16611e2f565b604051602001610ce3919061339e565b60405160208183030381529060405290610d105760405162461bcd60e51b81526004016109c59190612e14565b505b60fc5460405163012b1d7b60e21b81526001600160a01b03909116906304ac75ec90610d46908690859087906004016133fa565b600060405180830381600087803b158015610d6057600080fd5b505af1158015610d74573d6000803e3d6000fd5b505050507ffdac6959a3a5882f20eeb4ea8e8a0007e1e99d29434bed07ce50b0d675d1f60f848284604051610dab9392919061341c565b60405180910390a150505050565b610dc33382611f35565b610ddf5760405162461bcd60e51b81526004016109c59061343b565b610a66838383611fb3565b6000610df5836112e9565b8210610e575760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016109c5565b506001600160a01b0391909116600090815260c960209081526040808320938352929052205490565b6101036020526000908152604090208054610e9a9061334a565b80601f0160208091040260200160405190810160405280929190818152602001828054610ec69061334a565b8015610f135780601f10610ee857610100808354040283529160200191610f13565b820191906000526020600020905b815481529060010190602001808311610ef657829003601f168201915b505050505081565b6060610f2f6033546001600160a01b031690565b6001600160a01b0316336001600160a01b031614611122576101005442101580610f7157506001600160a01b0383166000908152610109602052604090205415155b610fe35760405162461bcd60e51b815260206004820152603960248201527f4172744472697665723a204e6f6e2d77686974656c697374656420757365727360448201527f2068617665206e6f7420796574206f70656e6564206d696e740000000000000060648201526084016109c5565b610100544210801561100d57506001600160a01b0383166000908152610109602052604090205482115b1561102f576001600160a01b0383166000908152610109602052604090205491505b6001600160a01b038316600090815261010960205260408120548310611094576001600160a01b03841660009081526101096020526040902054611073908461349f565b6001600160a01b0385166000908152610109602052604081205590506110c3565b6001600160a01b03841660009081526101096020526040812080548592906110bd90849061349f565b90915550505b8060fe546110d191906134b6565b3410156111205760405162461bcd60e51b815260206004820152601f60248201527f4172744472697665723a206d73672e76616c756520446566696369656e63790060448201526064016109c5565b505b60008267ffffffffffffffff81111561113d5761113d612eb2565b604051908082528060200260200182016040528015611166578160200160208202803683370190505b50905060005b838110156111ac5761117d8561215a565b82828151811061118f5761118f6134d5565b6020908102919091010152806111a4816134eb565b91505061116c565b509392505050565b610a668383836040518060200160405280600081525061158b565b60006111da60cb5490565b821061123d5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016109c5565b60cb8281548110611250576112506134d5565b90600052602060002001549050919050565b6101026020526000908152604090208054610e9a9061334a565b6000818152609960205260408120546001600160a01b0316806108915760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016109c5565b60fd8054610e9a9061334a565b60006001600160a01b0382166113535760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016109c5565b506001600160a01b03166000908152609a602052604090205490565b61137761234c565b61138160006123a6565b565b604080516001600160a01b038416602082015290810182905260009081906060016040516020818303038152906040528051906020012090506113c98560ff54836123f8565b95945050505050565b6113da61234c565b60fe80549082905560408051828152602081018490527fb9362b96e28efbb7a7e63bb4a97faf9924ec0394635feff8588a6ae2a5f784fe91015b60405180910390a15050565b6001600160a01b0383166000908152610108602052604090205460ff16156114955760405162461bcd60e51b815260206004820152602260248201527f4172744472697665723a2054686973206164647265737320697320636c61696d604482015261195960f21b60648201526084016109c5565b6114a0828483611383565b6115005760405162461bcd60e51b815260206004820152602b60248201527f4172744472697665723a205468652070726f6f6620636f756c64206e6f74206260448201526a32903b32b934b334b2b21760a91b60648201526084016109c5565b6001600160a01b038316600081815261010960209081526040808320859055610108825291829020805460ff19166001179055815192835282018390527fba5ec43de175afadf4606466cf5d34a6a29fe6bd172df29a0476e8eadb7b38e7910160405180910390a1505050565b6060609880546108a69061334a565b61158733838361240e565b5050565b6115953383611f35565b6115b15760405162461bcd60e51b81526004016109c59061343b565b6115bd848484846124dd565b50505050565b6101046020526000908152604090208054610e9a9061334a565b6000818152609960205260409020546060906001600160a01b03166116145760405162461bcd60e51b81526004016109c590613506565b60fd61161f83611e2f565b6000848152610107602052604090205461163b9060ff16611e2f565b60008581526101026020908152604080832061010383528184206101048452828520610105855294839020925161167a989796959294919391016135ea565b6040516020818303038152906040529050919050565b600054610100900460ff16158080156116b05750600054600160ff909116105b806116ca5750303b1580156116ca575060005460ff166001145b61172d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016109c5565b6000805460ff191660011790558015611750576000805461ff0019166101001790555b61175a8b8b612510565b611762612541565b88516117759060fd9060208c0190612cf0565b5060fc80546001600160a01b0319166001600160a01b038a1617905560fe8790556101016020527f78cc36da285c6bcc00b8ad0e7f4d07c0a99aacb1489e96b1bd1973c526600fea8490557f34f48ecb70d0b9ceaba0af892a975df1c49d4004ccc0ec2341be01c6ba8eb11c85905560036000527f516f9dc56cb0fb57c0adc39ead1822888cd1b1d04946ab546ff9ab29341eed3986905560ff839055610100829055801561185e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050505050565b6000818152609960205260409020546001600160a01b031661189f5760405162461bcd60e51b81526004016109c590613506565b6000818152610106602052604090205460ff16156118ff5760405162461bcd60e51b815260206004820152601a60248201527f4172744472697665723a20746f6b656e206973206c6f636b656400000000000060448201526064016109c5565b336119098261127c565b6001600160a01b03161461195f5760405162461bcd60e51b815260206004820152601c60248201527f4172744472697665723a20596f7520617265206e6f74206f776e65720000000060448201526064016109c5565b6000818152610106602052604090819020805460ff19166001179055517f032bc66be43dbccb7487781d168eb7bda224628a3b2c3388bdf69b532a3a1611906119ab9083815260200190565b60405180910390a150565b6000818152609960205260409020546001600160a01b03166119ea5760405162461bcd60e51b81526004016109c590613506565b6000818152610106602052604090205460ff1615611a4a5760405162461bcd60e51b815260206004820152601a60248201527f4172744472697665723a20746f6b656e206973206c6f636b656400000000000060448201526064016109c5565b33611a548261127c565b6001600160a01b031614611aaa5760405162461bcd60e51b815260206004820152601c60248201527f4172744472697665723a20596f7520617265206e6f74206f776e65720000000060448201526064016109c5565b60fc54600090819081906001600160a01b031663beff730f611acb60cb5490565b6040518263ffffffff1660e01b8152600401611ae991815260200190565b60006040518083038186803b158015611b0157600080fd5b505afa158015611b15573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b3d91908101906136ce565b6000878152610102602090815260409091208451949750929550909350611b679290860190612cf0565b506000848152610103602090815260409091208351611b8892850190612cf0565b506000848152610104602090815260409091208251611ba992840190612cf0565b507f57f3798e8ce1fb9ea6eea73c23e95f2e6fabfbc4c8dd4586374c5c176393b74084848484604051610dab949392919061374c565b611be761234c565b6040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015611c1d573d6000803e3d6000fd5b50604080516001600160a01b0384168152602081018390527fd9b66890b56321a19d7a216dd918f8c0d4023759afc4088deb9be15aca68ece29101611414565b611c6561234c565b6001600160a01b038116611cca5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016109c5565b611cd3816123a6565b50565b6101056020526000908152604090208054610e9a9061334a565b6001600160a01b03163b151590565b60006001600160e01b031982166380ac58cd60e01b1480611d3057506001600160e01b03198216635b5e139f60e01b145b8061089157506301ffc9a760e01b6001600160e01b0319831614610891565b6000818152609960205260409020546001600160a01b0316611cd35760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016109c5565b6000818152609b6020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611de38261127c565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611e2882846137a1565b9392505050565b606081611e535750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611e7d5780611e67816134eb565b9150611e769050600a836137a1565b9150611e57565b60008167ffffffffffffffff811115611e9857611e98612eb2565b6040519080825280601f01601f191660200182016040528015611ec2576020820181803683370190505b5090505b8415611f2d57611ed760018361349f565b9150611ee4600a866137b5565b611eef9060306137c9565b60f81b818381518110611f0457611f046134d5565b60200101906001600160f81b031916908160001a905350611f26600a866137a1565b9450611ec6565b949350505050565b600080611f418361127c565b9050806001600160a01b0316846001600160a01b03161480611f8857506001600160a01b038082166000908152609c602090815260408083209388168352929052205460ff165b80611f2d5750836001600160a01b0316611fa184610929565b6001600160a01b031614949350505050565b826001600160a01b0316611fc68261127c565b6001600160a01b03161461202a5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016109c5565b6001600160a01b03821661208c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016109c5565b612097838383612570565b6120a2600082611dae565b6001600160a01b0383166000908152609a602052604081208054600192906120cb90849061349f565b90915550506001600160a01b0382166000908152609a602052604081208054600192906120f99084906137c9565b909155505060008181526099602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600061216560fb5490565b60fc54909150600090819081906001600160a01b031663beff730f61218960cb5490565b6040518263ffffffff1660e01b81526004016121a791815260200190565b60006040518083038186803b1580156121bf57600080fd5b505afa1580156121d3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526121fb91908101906136ce565b60008781526101026020908152604090912084519497509295509093506122259290860190612cf0565b50600084815261010360209081526040909120835161224692850190612cf0565b50600084815261010460209081526040909120825161226792840190612cf0565b50600061227385612628565b600086815261010760209081526040808320805460ff191660ff86169081179091558352610101909152812080549293506001929091906122b590849061349f565b90915550506001600160a01b038616600090815261010a602052604081208054600192906122e49084906137c9565b909155506122f49050868661278a565b61230260fb80546001019055565b7f06d462992b94a71271caecaa4d7031f82eed46383a2d5c24c15f7ab75b9a7a9485878686868660405161233b969594939291906137e1565b60405180910390a150505050919050565b6033546001600160a01b031633146113815760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109c5565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008261240585846128d8565b14949350505050565b816001600160a01b0316836001600160a01b031614156124705760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016109c5565b6001600160a01b038381166000818152609c6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6124e8848484611fb3565b6124f48484848461291d565b6115bd5760405162461bcd60e51b81526004016109c590613848565b600054610100900460ff166125375760405162461bcd60e51b81526004016109c59061389a565b6115878282612a2a565b600054610100900460ff166125685760405162461bcd60e51b81526004016109c59061389a565b611381612a78565b6001600160a01b0383166125cb576125c68160cb8054600083815260cc60205260408120829055600182018355919091527fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb0155565b6125ee565b816001600160a01b0316836001600160a01b0316146125ee576125ee8382612aa8565b6001600160a01b03821661260557610a6681612b45565b826001600160a01b0316826001600160a01b031614610a6657610a668282612bf4565b600260009081526101016020527f34f48ecb70d0b9ceaba0af892a975df1c49d4004ccc0ec2341be01c6ba8eb11c5415801561268e575060036000526101016020527f516f9dc56cb0fb57c0adc39ead1822888cd1b1d04946ab546ff9ab29341eed3954155b1561269b57506001919050565b606460006126ab60018386612c38565b90508060ff16606414156126c257600392506126eb565b8060ff1660641180156126d857508060ff16605a105b156126e657600292506126eb565b600192505b60ff83166003148015612728575060036000526101016020527f516f9dc56cb0fb57c0adc39ead1822888cd1b1d04946ab546ff9ab29341eed3954155b15612737575060019392505050565b60ff83166002148015612774575060026000526101016020527f34f48ecb70d0b9ceaba0af892a975df1c49d4004ccc0ec2341be01c6ba8eb11c54155b15612783575060019392505050565b5050919050565b6001600160a01b0382166127e05760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016109c5565b6000818152609960205260409020546001600160a01b0316156128455760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016109c5565b61285160008383612570565b6001600160a01b0382166000908152609a6020526040812080546001929061287a9084906137c9565b909155505060008181526099602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600081815b84518110156111ac57612909828683815181106128fc576128fc6134d5565b6020026020010151612c45565b915080612915816134eb565b9150506128dd565b60006001600160a01b0384163b15612a1f57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906129619033908990889088906004016138e5565b602060405180830381600087803b15801561297b57600080fd5b505af19250505080156129ab575060408051601f3d908101601f191682019092526129a891810190613922565b60015b612a05573d8080156129d9576040519150601f19603f3d011682016040523d82523d6000602084013e6129de565b606091505b5080516129fd5760405162461bcd60e51b81526004016109c590613848565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611f2d565b506001949350505050565b600054610100900460ff16612a515760405162461bcd60e51b81526004016109c59061389a565b8151612a64906097906020850190612cf0565b508051610a66906098906020840190612cf0565b600054610100900460ff16612a9f5760405162461bcd60e51b81526004016109c59061389a565b611381336123a6565b60006001612ab5846112e9565b612abf919061349f565b600083815260ca6020526040902054909150808214612b12576001600160a01b038416600090815260c960209081526040808320858452825280832054848452818420819055835260ca90915290208190555b50600091825260ca602090815260408084208490556001600160a01b03909416835260c981528383209183525290812055565b60cb54600090612b579060019061349f565b600083815260cc602052604081205460cb8054939450909284908110612b7f57612b7f6134d5565b906000526020600020015490508060cb8381548110612ba057612ba06134d5565b600091825260208083209091019290925582815260cc909152604080822084905585825281205560cb805480612bd857612bd861393f565b6001900381819060005260206000200160009055905550505050565b6000612bff836112e9565b6001600160a01b03909316600090815260c960209081526040808320868452825280832085905593825260ca9052919091209190915550565b6000611f2d848484612c74565b6000818310612c61576000828152602084905260409020611e28565b6000838152602083905260409020611e28565b604080514260208083018290524483850181905260608085018790528551808603909101815260808501865280519083012060a085019390935260c084015260e08084018390528451808503909101815261010090930190935281519190920120600091908590612ce69086906137b5565b6113c991906137c9565b828054612cfc9061334a565b90600052602060002090601f016020900481019282612d1e5760008555612d64565b82601f10612d3757805160ff1916838001178555612d64565b82800160010185558215612d64579182015b82811115612d64578251825591602001919060010190612d49565b50612d70929150612d74565b5090565b5b80821115612d705760008155600101612d75565b6001600160e01b031981168114611cd357600080fd5b600060208284031215612db157600080fd5b8135611e2881612d89565b60005b83811015612dd7578181015183820152602001612dbf565b838111156115bd5750506000910152565b60008151808452612e00816020860160208601612dbc565b601f01601f19169290920160200192915050565b602081526000611e286020830184612de8565b600060208284031215612e3957600080fd5b5035919050565b80356001600160a01b0381168114612e5757600080fd5b919050565b60008060408385031215612e6f57600080fd5b612e7883612e40565b946020939093013593505050565b600060208284031215612e9857600080fd5b611e2882612e40565b803560ff81168114612e5757600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612ef157612ef1612eb2565b604052919050565b600067ffffffffffffffff821115612f1357612f13612eb2565b50601f01601f191660200190565b6000612f34612f2f84612ef9565b612ec8565b9050828152838383011115612f4857600080fd5b828260208301376000602084830101529392505050565b600082601f830112612f7057600080fd5b611e2883833560208501612f21565b600080600060608486031215612f9457600080fd5b83359250612fa460208501612ea1565b9150604084013567ffffffffffffffff811115612fc057600080fd5b612fcc86828701612f5f565b9150509250925092565b600080600060608486031215612feb57600080fd5b612ff484612e40565b925061300260208501612e40565b9150604084013590509250925092565b6020808252825182820181905260009190848201906040850190845b8181101561304a5783518352928401929184019160010161302e565b50909695505050505050565b600082601f83011261306757600080fd5b8135602067ffffffffffffffff82111561308357613083612eb2565b8160051b613092828201612ec8565b92835284810182019282810190878511156130ac57600080fd5b83870192505b848310156130cb578235825291830191908301906130b2565b979650505050505050565b6000806000606084860312156130eb57600080fd5b833567ffffffffffffffff81111561310257600080fd5b61310e86828701613056565b93505061300260208501612e40565b60008060006060848603121561313257600080fd5b61313b84612e40565b9250602084013567ffffffffffffffff81111561315757600080fd5b61316386828701613056565b925050604084013590509250925092565b6000806040838503121561318757600080fd5b61319083612e40565b9150602083013580151581146131a557600080fd5b809150509250929050565b600080600080608085870312156131c657600080fd5b6131cf85612e40565b93506131dd60208601612e40565b925060408501359150606085013567ffffffffffffffff81111561320057600080fd5b8501601f8101871361321157600080fd5b61322087823560208401612f21565b91505092959194509250565b6000806000806000806000806000806101408b8d03121561324c57600080fd5b8a3567ffffffffffffffff8082111561326457600080fd5b6132708e838f01612f5f565b9b5060208d013591508082111561328657600080fd5b6132928e838f01612f5f565b9a5060408d01359150808211156132a857600080fd5b506132b58d828e01612f5f565b9850506132c460608c01612e40565b999c989b50969960808101359860a0820135985060c0820135975060e082013596506101008201359550610120909101359350915050565b6000806040838503121561330f57600080fd5b61331883612e40565b915061332660208401612e40565b90509250929050565b60006020828403121561334157600080fd5b611e2882612ea1565b600181811c9082168061335e57607f821691505b6020821081141561337f57634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561339757600080fd5b5051919050565b7f4172744472697665723a205468657265206973206e6f20737563682074797065815261205b60f01b6020820152600082516133e1816022850160208701612dbc565b61205d60f01b6022939091019283015250602401919050565b60ff841681528260208201526060604082015260006113c96060830184612de8565b8381528260208201526060604082015260006113c96060830184612de8565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000828210156134b1576134b1613489565b500390565b60008160001904831182151516156134d0576134d0613489565b500290565b634e487b7160e01b600052603260045260246000fd5b60006000198214156134ff576134ff613489565b5060010190565b6020808252602a908201527f4172744472697665723a2055524920717565727920666f72206e6f6e657869736040820152693a32b73a103a37b5b2b760b11b606082015260800190565b8054600090600181811c908083168061356a57607f831692505b602080841082141561358c57634e487b7160e01b600052602260045260246000fd5b8180156135a057600181146135b1576135de565b60ff198616895284890196506135de565b60008881526020902060005b868110156135d65781548b8201529085019083016135bd565b505084890196505b50505050505092915050565b60006135f6828a613550565b602f60f81b8082528951613611816001850160208e01612dbc565b60019201918201819052885161362e816002850160208d01612dbc565b600292019182018190526136456003830189613550565b91508082526136576001830188613550565b91508082526136696001830187613550565b908152905061367b6001820185613550565b9a9950505050505050505050565b600082601f83011261369a57600080fd5b81516136a8612f2f82612ef9565b8181528460208386010111156136bd57600080fd5b611f2d826020830160208701612dbc565b6000806000606084860312156136e357600080fd5b835167ffffffffffffffff808211156136fb57600080fd5b61370787838801613689565b9450602086015191508082111561371d57600080fd5b61372987838801613689565b9350604086015191508082111561373f57600080fd5b50612fcc86828701613689565b8481526080602082015260006137656080830186612de8565b82810360408401526137778186612de8565b905082810360608401526130cb8185612de8565b634e487b7160e01b600052601260045260246000fd5b6000826137b0576137b061378b565b500490565b6000826137c4576137c461378b565b500690565b600082198211156137dc576137dc613489565b500190565b8681526001600160a01b038616602082015260c06040820181905260009061380b90830187612de8565b828103606084015261381d8187612de8565b905082810360808401526138318186612de8565b91505060ff831660a0830152979650505050505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061391890830184612de8565b9695505050505050565b60006020828403121561393457600080fd5b8151611e2881612d89565b634e487b7160e01b600052603160045260246000fdfea264697066735822122009e9ea5b7248fead8df50f1d8af087289e16604b3060d778ec9dcba7064d743064736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2008,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2854,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 311,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "_name",
        "offset": 0,
        "slot": "151",
        "type": "t_string_storage"
      },
      {
        "astId": 313,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "_symbol",
        "offset": 0,
        "slot": "152",
        "type": "t_string_storage"
      },
      {
        "astId": 317,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "_owners",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 321,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "_balances",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 325,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 331,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1173,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "__gap",
        "offset": 0,
        "slot": "157",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 1338,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1342,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1345,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "_allTokens",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1349,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1665,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "__gap",
        "offset": 0,
        "slot": "205",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 4498,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "251",
        "type": "t_struct(Counter)2015_storage"
      },
      {
        "astId": 4510,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "thesaurus",
        "offset": 0,
        "slot": "252",
        "type": "t_contract(IThesaurus)5881"
      },
      {
        "astId": 4512,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "baseURI",
        "offset": 0,
        "slot": "253",
        "type": "t_string_storage"
      },
      {
        "astId": 4514,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "price",
        "offset": 0,
        "slot": "254",
        "type": "t_uint256"
      },
      {
        "astId": 4516,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "merkleRoot",
        "offset": 0,
        "slot": "255",
        "type": "t_bytes32"
      },
      {
        "astId": 4518,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "mintStartTime",
        "offset": 0,
        "slot": "256",
        "type": "t_uint256"
      },
      {
        "astId": 4522,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "typeAmount",
        "offset": 0,
        "slot": "257",
        "type": "t_mapping(t_uint8,t_uint256)"
      },
      {
        "astId": 4526,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "verb",
        "offset": 0,
        "slot": "258",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 4530,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "adj",
        "offset": 0,
        "slot": "259",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 4534,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "noun",
        "offset": 0,
        "slot": "260",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 4538,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "added",
        "offset": 0,
        "slot": "261",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 4542,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "locked",
        "offset": 0,
        "slot": "262",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 4546,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "types",
        "offset": 0,
        "slot": "263",
        "type": "t_mapping(t_uint256,t_uint8)"
      },
      {
        "astId": 4550,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "claimed",
        "offset": 0,
        "slot": "264",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4554,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "allowedMintAmount",
        "offset": 0,
        "slot": "265",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4558,
        "contract": "contracts/ArtDriver.sol:ArtDriver",
        "label": "minted",
        "offset": 0,
        "slot": "266",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IThesaurus)5881": {
        "encoding": "inplace",
        "label": "contract IThesaurus",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint8)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2015_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 2014,
            "contract": "contracts/ArtDriver.sol:ArtDriver",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}