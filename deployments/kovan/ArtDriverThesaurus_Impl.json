{
  "address": "0x44cDF64602520e08A0D07495447B7e91b7a9E14E",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "AddMinter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "SubMinter",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADJ_TYPE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NOUN_TYPE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERB_TYPE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "addMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_weight",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_word",
          "type": "string"
        }
      ],
      "name": "addWord",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "string[]",
          "name": "_words",
          "type": "string[]"
        }
      ],
      "name": "addWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "adjs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adjsAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nouns",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nounsAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomWords",
      "outputs": [
        {
          "internalType": "string",
          "name": "_verb",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_adj",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_noun",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "subMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalWordsAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "verbs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verbsAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5970a91bf4a608110c447b304e342c39c5a0896dbb7b9ad856e32adca594e000",
  "receipt": {
    "to": null,
    "from": "0xAE4bdBb0824C9B602589a5DaD2aD96C8A2AcC607",
    "contractAddress": "0x44cDF64602520e08A0D07495447B7e91b7a9E14E",
    "transactionIndex": 3,
    "gasUsed": "1282413",
    "logsBloom": "0x
    "blockHash": "0xc8ac901f1500dfee42cbca9a912a9e0d4f6c632a0dad7371866e40792c989e83",
    "transactionHash": "0x5970a91bf4a608110c447b304e342c39c5a0896dbb7b9ad856e32adca594e000",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 31845957,
        "transactionHash": "0x5970a91bf4a608110c447b304e342c39c5a0896dbb7b9ad856e32adca594e000",
        "address": "0x44cDF64602520e08A0D07495447B7e91b7a9E14E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ae4bdbb0824c9b602589a5dad2ad96c8a2acc607"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xc8ac901f1500dfee42cbca9a912a9e0d4f6c632a0dad7371866e40792c989e83"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 31845957,
        "transactionHash": "0x5970a91bf4a608110c447b304e342c39c5a0896dbb7b9ad856e32adca594e000",
        "address": "0x44cDF64602520e08A0D07495447B7e91b7a9E14E",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 6,
        "blockHash": "0xc8ac901f1500dfee42cbca9a912a9e0d4f6c632a0dad7371866e40792c989e83"
      }
    ],
    "blockNumber": 31845957,
    "cumulativeGasUsed": "1710034",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a0096befa68c9d0ce4c6842cc314cfa3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"AddMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"SubMinter\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADJ_TYPE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NOUN_TYPE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERB_TYPE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_word\",\"type\":\"string\"}],\"name\":\"addWord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"string[]\",\"name\":\"_words\",\"type\":\"string[]\"}],\"name\":\"addWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adjs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adjsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nouns\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nounsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomWords\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_verb\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_adj\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_noun\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"subMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWordsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"verbs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verbsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ArtDriveThesaurus.sol\":\"ArtDriveThesaurus\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"contracts/ArtDriveThesaurus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\nimport \\\"./interface/IThesaurus.sol\\\";\\r\\nimport \\\"./utils/Random.sol\\\";\\r\\n\\r\\ncontract ArtDriveThesaurus is OwnableUpgradeable, IThesaurus {\\r\\n    mapping(address => bool) public minters;\\r\\n\\r\\n    string[] public verbs;\\r\\n    string[] public adjs;\\r\\n    string[] public nouns;\\r\\n\\r\\n    modifier isMinter() {\\r\\n        require(minters[msg.sender], \\\"ArtDriveThesaurus: sender is not a minter\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event AddMinter(address minter);\\r\\n    event SubMinter(address minter);\\r\\n\\r\\n    constructor() {\\r\\n        initialize();\\r\\n    }\\r\\n\\r\\n    function initialize() public initializer {\\r\\n        __Ownable_init();\\r\\n        verbs.push();\\r\\n        adjs.push();\\r\\n        nouns.push();\\r\\n    }\\r\\n\\r\\n    // ============= view function =============\\r\\n\\r\\n    function VERB_TYPE() public pure override returns (uint8) {\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    function ADJ_TYPE() public pure override returns (uint8) {\\r\\n        return 2;\\r\\n    }\\r\\n\\r\\n    function NOUN_TYPE() public pure override returns (uint8) {\\r\\n        return 3;\\r\\n    }\\r\\n\\r\\n    function verbsAmount() external view returns (uint256) {\\r\\n        return verbs.length - 1;\\r\\n    }\\r\\n\\r\\n    function adjsAmount() external view returns (uint256) {\\r\\n        return adjs.length - 1;\\r\\n    }\\r\\n\\r\\n    function nounsAmount() external view returns (uint256) {\\r\\n        return nouns.length - 1;\\r\\n    }\\r\\n\\r\\n    function totalWordsAmount() external view override returns (uint256) {\\r\\n        return verbs.length + adjs.length + nouns.length - 3;\\r\\n    }\\r\\n\\r\\n    function randomWords()\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            string memory _verb,\\r\\n            string memory _adj,\\r\\n            string memory _noun\\r\\n        )\\r\\n    {\\r\\n        uint256 randNonce = uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty)));\\r\\n        _verb = verbs[Random.random(1, verbs.length, randNonce - 333)];\\r\\n        _adj = adjs[Random.random(1, adjs.length, randNonce - 111)];\\r\\n        _noun = nouns[Random.random(1, nouns.length, randNonce - 777)];\\r\\n    }\\r\\n\\r\\n    // ============= write function =============\\r\\n\\r\\n    function addMinter(address _minter) external onlyOwner {\\r\\n        minters[_minter] = true;\\r\\n        emit AddMinter(_minter);\\r\\n    }\\r\\n\\r\\n    function subMinter(address _minter) external onlyOwner {\\r\\n        minters[_minter] = false;\\r\\n        emit SubMinter(_minter);\\r\\n    }\\r\\n\\r\\n    function addWord(\\r\\n        uint8 _type,\\r\\n        uint256 _weight,\\r\\n        string memory _word\\r\\n    ) external override isMinter {\\r\\n        if (_type == VERB_TYPE()) {\\r\\n            _addWord(_weight, _word, verbs);\\r\\n        } else if (_type == ADJ_TYPE()) {\\r\\n            _addWord(_weight, _word, adjs);\\r\\n        } else if (_type == NOUN_TYPE()) {\\r\\n            _addWord(_weight, _word, nouns);\\r\\n        } else {\\r\\n            require(\\r\\n                false,\\r\\n                string(abi.encodePacked(\\\"ArtDriveThesaurus: There is no such type [\\\", Strings.toString(_type), \\\" ]\\\"))\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ============= owner function =============\\r\\n\\r\\n    function addWords(uint8 _type, string[] memory _words) external onlyOwner {\\r\\n        if (_type == 1) {\\r\\n            _addWord(_words, verbs);\\r\\n        } else if (_type == 2) {\\r\\n            _addWord(_words, adjs);\\r\\n        } else if (_type == 3) {\\r\\n            _addWord(_words, nouns);\\r\\n        } else {\\r\\n            require(\\r\\n                false,\\r\\n                string(abi.encodePacked(\\\"ArtDriveThesaurus: There is no such type [\\\", Strings.toString(_type), \\\" ]\\\"))\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ============= internal function =============\\r\\n\\r\\n    function _addWord(\\r\\n        uint256 _weight,\\r\\n        string memory _content,\\r\\n        string[] storage _array\\r\\n    ) private {\\r\\n        for (uint256 i = 0; i < _weight; i++) {\\r\\n            _array.push(_content);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _addWord(string[] memory _words, string[] storage _array) private {\\r\\n        for (uint256 i = 0; i < _words.length; i++) {\\r\\n            _array.push(_words[i]);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8ea0abd9bb5de6b1cb2799fba0b40fca14aa0da7606e3a7b083c0a06744dc094\",\"license\":\"MIT\"},\"contracts/interface/IThesaurus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\ninterface IThesaurus {\\r\\n    function addWord(\\r\\n        uint8 _type,\\r\\n        uint256 _weight,\\r\\n        string memory _content\\r\\n    ) external;\\r\\n\\r\\n    function totalWordsAmount() external view returns (uint256);\\r\\n\\r\\n    function randomWords()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            string memory _verb,\\r\\n            string memory _adj,\\r\\n            string memory _noun\\r\\n        );\\r\\n\\r\\n    function VERB_TYPE() external pure returns (uint8);\\r\\n\\r\\n    function ADJ_TYPE() external pure returns (uint8);\\r\\n\\r\\n    function NOUN_TYPE() external pure returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0xae15d99026d9befdc25bd0d9d826a0cab20359038bb6190492e1e95dc96a369d\",\"license\":\"MIT\"},\"contracts/utils/Random.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nlibrary Random {\\r\\n    function random(\\r\\n        uint256 _from,\\r\\n        uint256 _to,\\r\\n        uint256 _nonce\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 randNonce = uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, _nonce)));\\r\\n        return (uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, randNonce))) % _to) + _from;\\r\\n    }\\r\\n\\r\\n    function random8(\\r\\n        uint256 _from,\\r\\n        uint256 _to,\\r\\n        uint256 _nonce\\r\\n    ) internal view returns (uint8) {\\r\\n        return uint8(random(_from, _to, _nonce));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x34b49e30abce9bafadbfbce0090eb54d7cac7966443da05cbcb67880fe4c4135\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620002f9565b6000620000306001620000bd565b9050801562000049576000805461ff0019166101001790555b62000053620001cf565b60668054600190810190915560678054820190556068805490910181556000528015620000ba576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b60008054610100900460ff161562000156578160ff166001148015620000f65750620000f4306200023760201b62000a941760201c565b155b6200014e5760405162461bcd60e51b815260206004820152602e6024820152600080516020620016fa83398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b506000919050565b60005460ff808416911610620001b55760405162461bcd60e51b815260206004820152602e6024820152600080516020620016fa83398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000145565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff166200022b5760405162461bcd60e51b815260206004820152602b60248201526000805160206200171a83398151915260448201526a6e697469616c697a696e6760a81b606482015260840162000145565b6200023562000246565b565b6001600160a01b03163b151590565b600054610100900460ff16620002a25760405162461bcd60e51b815260206004820152602b60248201526000805160206200171a83398151915260448201526a6e697469616c697a696e6760a81b606482015260840162000145565b6200023533603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6113f180620003096000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80638da5cb5b116100ad578063c67141b311610071578063c67141b31461023a578063cc3a02e61461024d578063e69543a014610255578063f2fde38b1461025d578063f46eccc41461027057600080fd5b80638da5cb5b146101eb57806393feca6014610206578063961b87ec1461020d578063983b2d5614610220578063c537a39b1461023357600080fd5b806366ac564a116100f457806366ac564a146101a957806368ab2650146101b15780636a8bb7cc146101c4578063715018a6146101db5780638129fc1c146101e357600080fd5b806302680304146101315780630427b2631461014657806304ac75ec1461016057806313871bfc146101735780634f54ea3214610193575b600080fd5b61014461013f366004610ead565b6102a3565b005b60015b60405160ff90911681526020015b60405180910390f35b61014461016e366004610fa5565b61032e565b610186610181366004610ffc565b61043e565b604051610157919061106d565b61019b6104ea565b604051908152602001610157565b61019b610501565b6101866101bf366004610ffc565b610530565b6101cc610540565b60405161015793929190611080565b6101446107c5565b6101446107fb565b6033546040516001600160a01b039091168152602001610157565b6002610149565b61018661021b366004610ffc565b61088c565b61014461022e366004610ead565b61089c565b6003610149565b6101446102483660046110c3565b61091a565b61019b6109d8565b61019b6109ea565b61014461026b366004610ead565b6109fc565b61029361027e366004610ead565b60656020526000908152604090205460ff1681565b6040519015158152602001610157565b6033546001600160a01b031633146102d65760405162461bcd60e51b81526004016102cd90611199565b60405180910390fd5b6001600160a01b038116600081815260656020908152604091829020805460ff1916905590519182527f946494d8c60533bc043c2cb72a2515efd8ef8aa39952f24cdb27d2deda784cda91015b60405180910390a150565b3360009081526065602052604090205460ff166103a05760405162461bcd60e51b815260206004820152602a60248201527f4172744472697665725468657361757275733a2073656e646572206973206e6f6044820152693a10309036b4b73a32b960b11b60648201526084016102cd565b60ff8316600114156103bd576103b882826066610aa3565b505050565b60ff8316600214156103d5576103b882826067610aa3565b60ff8316600314156103ed576103b882826068610aa3565b60006103fb8460ff16610ae7565b60405160200161040b91906111ce565b604051602081830303815290604052906104385760405162461bcd60e51b81526004016102cd919061106d565b50505050565b6066818154811061044e57600080fd5b90600052602060002001600091509050805461046990611233565b80601f016020809104026020016040519081016040528092919081815260200182805461049590611233565b80156104e25780601f106104b7576101008083540402835291602001916104e2565b820191906000526020600020905b8154815290600101906020018083116104c557829003601f168201915b505050505081565b6068546000906104fc90600190611284565b905090565b606854606754606654600092600392909161051c919061129b565b610526919061129b565b6104fc9190611284565b6068818154811061044e57600080fd5b606080606060004244604051602001610563929190918252602082015260400190565b60408051601f198184030181529190528051602090910120606680549192509061059b9060019061059661014d86611284565b610bed565b815481106105ab576105ab6112b3565b9060005260206000200180546105c090611233565b80601f01602080910402602001604051908101604052809291908181526020018280546105ec90611233565b80156106395780601f1061060e57610100808354040283529160200191610639565b820191906000526020600020905b81548152906001019060200180831161061c57829003601f168201915b50505050509350606761065a6001606780549050606f856105969190611284565b8154811061066a5761066a6112b3565b90600052602060002001805461067f90611233565b80601f01602080910402602001604051908101604052809291908181526020018280546106ab90611233565b80156106f85780601f106106cd576101008083540402835291602001916106f8565b820191906000526020600020905b8154815290600101906020018083116106db57829003601f168201915b50505050509250606861071a6001606880549050610309856105969190611284565b8154811061072a5761072a6112b3565b90600052602060002001805461073f90611233565b80601f016020809104026020016040519081016040528092919081815260200182805461076b90611233565b80156107b85780601f1061078d576101008083540402835291602001916107b8565b820191906000526020600020905b81548152906001019060200180831161079b57829003601f168201915b5050505050915050909192565b6033546001600160a01b031633146107ef5760405162461bcd60e51b81526004016102cd90611199565b6107f96000610c72565b565b60006108076001610cc4565b9050801561081f576000805461ff0019166101001790555b610827610d51565b60668054600190810190915560678054820190556068805490910181556000528015610889576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610323565b50565b6067818154811061044e57600080fd5b6033546001600160a01b031633146108c65760405162461bcd60e51b81526004016102cd90611199565b6001600160a01b038116600081815260656020908152604091829020805460ff1916600117905590519182527f16baa937b08d58713325f93ac58b8a9369a4359bbefb4957d6d9b402735722ab9101610323565b6033546001600160a01b031633146109445760405162461bcd60e51b81526004016102cd90611199565b8160ff166001141561095f5761095b816066610d80565b5050565b8160ff16600214156109765761095b816067610d80565b8160ff166003141561098d5761095b816068610d80565b600061099b8360ff16610ae7565b6040516020016109ab91906111ce565b604051602081830303815290604052906103b85760405162461bcd60e51b81526004016102cd919061106d565b6066546000906104fc90600190611284565b6067546000906104fc90600190611284565b6033546001600160a01b03163314610a265760405162461bcd60e51b81526004016102cd90611199565b6001600160a01b038116610a8b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102cd565b61088981610c72565b6001600160a01b03163b151590565b60005b8381101561043857815460018101835560008381526020908190208551610ad4939190910191860190610e14565b5080610adf816112c9565b915050610aa6565b606081610b0b5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610b355780610b1f816112c9565b9150610b2e9050600a836112fa565b9150610b0f565b60008167ffffffffffffffff811115610b5057610b50610eee565b6040519080825280601f01601f191660200182016040528015610b7a576020820181803683370190505b5090505b8415610be557610b8f600183611284565b9150610b9c600a8661130e565b610ba790603061129b565b60f81b818381518110610bbc57610bbc6112b3565b60200101906001600160f81b031916908160001a905350610bde600a866112fa565b9450610b7e565b949350505050565b604080514260208083018290524483850181905260608085018790528551808603909101815260808501865280519083012060a085019390935260c084015260e08084018390528451808503909101815261010090930190935281519190920120600091908590610c5f90869061130e565b610c69919061129b565b95945050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff1615610d0b578160ff166001148015610ce75750303b155b610d035760405162461bcd60e51b81526004016102cd90611322565b506000919050565b60005460ff808416911610610d325760405162461bcd60e51b81526004016102cd90611322565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16610d785760405162461bcd60e51b81526004016102cd90611370565b6107f9610de4565b60005b82518110156103b85781838281518110610d9f57610d9f6112b3565b60209081029190910181015182546001810184556000938452928290208151610dd19491909101929190910190610e14565b5080610ddc816112c9565b915050610d83565b600054610100900460ff16610e0b5760405162461bcd60e51b81526004016102cd90611370565b6107f933610c72565b828054610e2090611233565b90600052602060002090601f016020900481019282610e425760008555610e88565b82601f10610e5b57805160ff1916838001178555610e88565b82800160010185558215610e88579182015b82811115610e88578251825591602001919060010190610e6d565b50610e94929150610e98565b5090565b5b80821115610e945760008155600101610e99565b600060208284031215610ebf57600080fd5b81356001600160a01b0381168114610ed657600080fd5b9392505050565b803560ff81168114610d4c57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610f2d57610f2d610eee565b604052919050565b600082601f830112610f4657600080fd5b813567ffffffffffffffff811115610f6057610f60610eee565b610f73601f8201601f1916602001610f04565b818152846020838601011115610f8857600080fd5b816020850160208301376000918101602001919091529392505050565b600080600060608486031215610fba57600080fd5b610fc384610edd565b925060208401359150604084013567ffffffffffffffff811115610fe657600080fd5b610ff286828701610f35565b9150509250925092565b60006020828403121561100e57600080fd5b5035919050565b60005b83811015611030578181015183820152602001611018565b838111156104385750506000910152565b60008151808452611059816020860160208601611015565b601f01601f19169290920160200192915050565b602081526000610ed66020830184611041565b6060815260006110936060830186611041565b82810360208401526110a58186611041565b905082810360408401526110b98185611041565b9695505050505050565b600080604083850312156110d657600080fd5b6110df83610edd565b915060208084013567ffffffffffffffff808211156110fd57600080fd5b818601915086601f83011261111157600080fd5b81358181111561112357611123610eee565b8060051b611132858201610f04565b918252838101850191858101908a84111561114c57600080fd5b86860192505b838310156111885782358581111561116a5760008081fd5b6111788c89838a0101610f35565b8352509186019190860190611152565b809750505050505050509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b7f4172744472697665725468657361757275733a205468657265206973206e6f2081526a737563682074797065205b60a81b60208201526000825161121a81602b850160208701611015565b61205d60f01b602b939091019283015250602d01919050565b600181811c9082168061124757607f821691505b6020821081141561126857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156112965761129661126e565b500390565b600082198211156112ae576112ae61126e565b500190565b634e487b7160e01b600052603260045260246000fd5b60006000198214156112dd576112dd61126e565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082611309576113096112e4565b500490565b60008261131d5761131d6112e4565b500690565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220e5c92f8f3d77cc63e5b28f6b942d98fbd5b387ea59f54d195108479e712423bc64736f6c63430008090033496e697469616c697a61626c653a20636f6e747261637420697320616c726561496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/ArtDriveThesaurus.sol:ArtDriveThesaurus",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 133,
        "contract": "contracts/ArtDriveThesaurus.sol:ArtDriveThesaurus",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1990,
        "contract": "contracts/ArtDriveThesaurus.sol:ArtDriveThesaurus",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/ArtDriveThesaurus.sol:ArtDriveThesaurus",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/ArtDriveThesaurus.sol:ArtDriveThesaurus",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3751,
        "contract": "contracts/ArtDriveThesaurus.sol:ArtDriveThesaurus",
        "label": "minters",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3754,
        "contract": "contracts/ArtDriveThesaurus.sol:ArtDriveThesaurus",
        "label": "verbs",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 3757,
        "contract": "contracts/ArtDriveThesaurus.sol:ArtDriveThesaurus",
        "label": "adjs",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 3760,
        "contract": "contracts/ArtDriveThesaurus.sol:ArtDriveThesaurus",
        "label": "nouns",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_string_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
